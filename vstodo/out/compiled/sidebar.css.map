{
  "version": 3,
  "file": "sidebar.css",
  "sources": [
    "Todos.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar _a;\nimport { onMount } from \"svelte\";\n;\nexport let user;\nexport let accessToken;\nlet text = ((_a = tsvscode.getState()) === null || _a === void 0 ? void 0 : _a.text) || \"\";\nlet todos = [];\n$: {\n    tsvscode.setState({ text });\n}\nfunction addTodo(t) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const response = yield fetch(`${apiBaseUrl}/todo`, {\n            method: \"POST\",\n            body: JSON.stringify({\n                text: t,\n            }),\n            headers: {\n                \"content-type\": \"application/json\",\n                authorization: `Bearer ${accessToken}`,\n            },\n        });\n        const { todo } = yield response.json();\n        todos = [todo, ...todos];\n    });\n}\nonMount(() => __awaiter(void 0, void 0, void 0, function* () {\n    window.addEventListener(\"message\", (event) => __awaiter(void 0, void 0, void 0, function* () {\n        const message = event.data;\n        switch (message.type) {\n            case \"new-todo\":\n                addTodo(message.value);\n                break;\n        }\n    }));\n    const response = yield fetch(`${apiBaseUrl}/todo`, {\n        headers: {\n            authorization: `Bearer ${accessToken}`,\n        },\n    });\n    const payload = yield response.json();\n    todos = payload.todos;\n}));\n</script>\n\n<style>\n    .complete {\n        text-decoration: line-through;\n    }\n</style>\n\n<div>Hello {user.name}!</div>\n\n<form\n    on:submit|preventDefault={async () => {\n        addTodo(text);\n        text = '';\n    }}>\n    <input bind:value={text} />\n</form>\n\n<ul>\n    {#each todos as todo (todo.id)}\n        <li\n            class:complete={todo.complete}\n            on:click={async () => {\n                todo.complete = !todo.complete;\n                const response = await fetch(`${apiBaseUrl}/todo`, {\n                    method: 'PUT',\n                    body: JSON.stringify({\n                        id: todo.id,\n                    }),\n                    headers: {\n                        'content-type': 'application/json',\n                        authorization: `Bearer ${accessToken}`,\n                    },\n                });\n                console.log(await response.json());\n            }}>\n            {todo.text}\n        </li>\n    {/each}\n</ul>\n"
  ],
  "names": [],
  "mappings": "AAuDI,SAAS,eAAC,CAAC,AACP,eAAe,CAAE,YAAY,AACjC,CAAC"
}